Especificaci√≥n de Conventional Commits
Conventional Commits especifica que el mensaje de commit debe ser estructurado de la siguiente manera:
<tipo>(√°mbito opcional): <descripci√≥n>
<LINEA_EN_BLANCO>
[cuerpo opcional]
<LINEA_EN_BLANCO>
[nota(s) al pie opcional(es)]
Hay ciertos elementos que ser√°n utilizados para comunicar la intenci√≥n del commit a terceros:

Si el tipo es fix indica que el commit es un parche de un error y est√° relacionado con la versi√≥n PATCH del proyecto.
Si el tipo es feat indica que el commit a√±ade una nueva funcionalidad y se relaciona con la versi√≥n MINOR del proyecto.
A√±adir el texto BREAKING CHANGE en el footer de un commit, o el car√°cter ! despu√©s del tipo, indica que se rompe la compatibilidad de la versi√≥n actual y est√° relacionado con la versi√≥n MAJOR del proyecto.
Espero que a√∫n no hayas hecho ü§Ø porque de verdad que es muy sencillo. Vamos a ver cada una de las zonas del commit en detalle.

Tipo

feat: cuando se a√±ade una nueva funcionalidad.
fix: cuando se arregla un error.
chore: tareas rutinarias que no sean espec√≠ficas de una feature o un error como por ejemplo a√±adir contenido al fichero .gitignore o instalar una dependencia.
test: si a√±adimos o arreglamos tests.
docs: cuando solo se modifica documentaci√≥n.
build: cuando el cambio afecta al compilado del proyecto.
ci: el cambio afecta a ficheros de configuraci√≥n y scripts relacionados con la integraci√≥n continua.
style: cambios de legibilidad o formateo de c√≥digo que no afecta a funcionalidad.
refactor: cambio de c√≥digo que no corrige errores ni a√±ade funcionalidad, pero mejora el c√≥digo.
perf: usado para mejoras de rendimiento.
revert: si el commit revierte un commit anterior. Deber√≠a indicarse el hash del commit que se revierte.
√Åmbito
El campo √°mbito es opcional y sirve para dar informaci√≥n contextual como por ejemplo indicar el nombre de la feature a la que afecta el commit.

Descripci√≥n
Breve descripci√≥n del cambio cumpliendo lo siguiente:

usa imperativos, en tiempo presente: ‚Äúa√±ade‚Äù mejor que ‚Äúa√±adido‚Äù o ‚Äúa√±adidos‚Äù
la primera letra siempre ir√° en min√∫scula
no escribir un punto al final
Cuerpo
Es opcional y deber√≠a a√±adir aportar m√°s informaci√≥n que la descripci√≥n. Deber√≠a usar el mismo tono imperativo que esta.

Nota al pie
Es opcional. Siempre se utiliza para indicar cambios que rompan la compatibilidad de la versi√≥n actual (Breaking Changes) aunque tambi√©n est√°n permitidos otros formatos que sigan la convenci√≥n de git trailer format.

